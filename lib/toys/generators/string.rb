require 'koremu'

module Toys
  module Generators
    # a Toys::Generators class that uses a model string to return similar strings generated with the 'koremutake' gam
    class String < Base

      # returns a single string generated to be similar to model string.
      # the model is used to determine the phrase_template.
      # the phrase template is generated by first splitting the model on " " into words,
      #   and then determining the number os syllables in each word,
      #   resulting in an array of integers.
      # when a string is generated, The phrase template's array is mapped to generate a random karemu
      #   word of approximately the same number of syllables, and the resulting array is shuffled, joined
      #   with spaces and then capitalized.
      # @example 1 word of 2-3 syllables
      #   simple = Toys::Generators::String.new("hello")
      #   simple.take(3) #=> ["Dehuve", "Brystaho", "Kipure"]
      # @example 3 words of 1,2, and 3 syllables
      #   longer = Toys::Generators::String.new("This is Sparta!")
      #   longer.take(2) #=> ["Stysite ly hede", "Hogreka sedro su"]
      # @example peek under the hood at the template for a really long sentence
      #   cheat = Toys::Generators::String.new("This is a sentence about stuff. " * 3)
      #   cheat.send(:phrase_template) #=> [2, 0, 1, 3, 3, 2, 1, 0, 1, 4, 3, 3, 1, 0, 0, 4, 3, 3]
      #   cheat.kick #=> "Ba bupelo treprebrefi pri hagi horadi ra bropomy vu grelevo stityfa ba ba dudebrive ba nu drubra mofopo"
      # @see http://www.ruby-doc.org/gems/docs/k/koremutake-0.1.0/README.html koremu Documentation
      # @return [String] a string generated from model template
      def kick
        mk_phrase
      end

      private

      def word_model
        @word_map ||= @model.split(" ").map{|m| map_from_word()}
      end

      def phrase_template
        @phrase_template ||= @model.split(" ").map{|m| word_to_template(m)}
      end
      def word_to_template(word)
        (word.length/2.5).floor.to_i + rng.rand(0..1)
      end

      def template_to_word(template)
        KoremuArray.new(Array.new(template){rng.rand(0..127)}).to_ks
      end

      def mk_phrase
        phrase_template.shuffle.map{|w| template_to_word(w)}.join(" ").capitalize
      end


    end
  end
end
Toy.name_generator(:string, Toys::Generators::String, false)
Toy.catcher_generator(String, Toys::Generators::String, false)